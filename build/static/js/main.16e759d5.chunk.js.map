{"version":3,"sources":["db.js","namepicker.js","App.js","serviceWorker.js","index.js"],"names":["store","coll","useDB","room","useState","messages","setMessages","useEffect","collection","where","onSnapshot","snap","docChanges","forEach","c","m","id","doc","type","data","current","msgs","sort","a","b","ts","seconds","filter","db","msg","add","delete","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","NamePicker","props","name","setName","showName","setShowName","inputEl","useRef","className","value","ref","style","display","onChange","e","target","onKeyPress","key","onSave","onClick","focus","Room","match","params","showCamera","setShowCamera","takePicture","img","async","imgID","Math","random","toString","substring","storageRef","child","putString","send","Date","alt","src","map","i","from","text","TextInput","onSend","setText","Camera","position","left","top","height","width","placeholder","disabled","App","window","location","pathname","length","path","component","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.16e759d5.chunk.js","sourcesContent":["import {useState, useEffect} from 'react'\nimport * as firebase from \"firebase/app\"\nimport \"firebase/firestore\"\nimport \"firebase/storage\"\n\nlet store\nconst coll = 'messages'\n\nfunction useDB(room) {\n    const [messages, setMessages] = useState([])\n    function add(m) {\n        setMessages(current => {\n            const msgs = [m, ...current]\n            msgs.sort((a,b)=> b.ts.seconds - a.ts.seconds)\n            return msgs\n        })\n    }\n    function remove(id) {\n        setMessages(current=> current.filter(m=> m.id!==id))\n    }\n    useEffect(() => {\n        store.collection(coll)\n        .where('room','==',room)\n        .onSnapshot(snap=> snap.docChanges().forEach(c=> {\n            const {doc, type} = c\n            if (type==='added') add({...doc.data(),id:doc.id})\n            if (type==='removed') remove(doc.id)\n        }))\n    }, [room])\n    return messages\n}\n\nconst db = {}\ndb.send = function(msg) {\n    return store.collection(coll).add(msg)\n}\ndb.delete = function(id) {\n    return store.collection(coll).doc(id).delete()\n}\n\nexport { db, useDB }\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyC9RtshYqMBoMUT-Nz-fwq_6zf5glQ0OtY\",\n    authDomain: \"talkie-2e6be.firebaseapp.com\",\n    databaseURL: \"https://talkie-2e6be.firebaseio.com\",\n    projectId: \"talkie-2e6be\",\n    storageBucket: \"talkie-2e6be.appspot.com\",\n    messagingSenderId: \"170527470492\",\n    appId: \"1:170527470492:web:f8954e3b20709aeb0f0e59\",\n    measurementId: \"G-RHD49LEQDS\"\n  };\n\nfirebase.initializeApp(firebaseConfig)\nstore = firebase.firestore()","import React, {useState, useRef} from 'react'\nimport { FiEdit, FiSave } from \"react-icons/fi\"\n\nfunction NamePicker(props){\n    const [name, setName] = useState('')\n    const [showName, setShowName] = useState(false)\n    const inputEl = useRef(null)\n    return <div className = \"edit-username\">\n        <input value = {name} ref = {inputEl}\n            className = \"name-input\"\n            style={{display:showName ? \"none\" : \"flex\"}}\n            onChange={e=> setName(e.target.value)}\n            onKeyPress={e => {\n                if(e.key === \"Enter\") props.onSave(name)\n            }}\n        />\n        {showName && <div>{name}</div>}\n        <button onClick = {() => {\n            inputEl.current.focus()\n            if(name) props.onSave(name)\n            setShowName(!showName)\n        }} className = \"name-button\">\n            {showName ? <FiEdit /> : <FiSave />}\n        </button>\n        \n    </div>\n}\n\nexport default NamePicker","import React, {useState, useEffect} from 'react'\nimport './App.css';\nimport {db, useDB} from './db'\nimport NamePicker from './namepicker'\nimport { BrowserRouter, Route } from 'react-router-dom'\nimport Camera from 'react-snap-pic'\nimport {FiCamera} from 'react-icons/fi'\nimport * as firebase from \"firebase/app\" // for uploading images captured\nimport \"firebase/storage\" // for uploading images captured\n\nfunction App(){\n  useEffect(()=>{\n    const {pathname} = window.location\n    if(pathname.length<2) window.location.pathname='home'\n  }, [])\n  return <BrowserRouter>\n    <Route path=\"/:room\" component={Room} />\n  </BrowserRouter>\n}\n\nfunction Room(props) {\n  const {room} = props.match.params\n  const [name, setName] = useState('')\n  const messages = useDB(room)\n  const [showCamera, setShowCamera] = useState(false)\n  \n  async function takePicture(img) {\n    setShowCamera(false)\n    const imgID = Math.random().toString(36).substring(7)\n    var storageRef = firebase.storage().ref()\n    var ref = storageRef.child(imgID + '.jpg')\n    await ref.putString(img, 'data_url')\n    db.send({ \n      img: imgID, name, ts: new Date(), room \n    })\n  }\n\n  return <main>\n\n    {showCamera && <Camera takePicture = {takePicture} />}\n\n    <header>\n      <div className=\"logo-wrap\">\n        <img className=\"logo\"\n          alt=\"logo\"\n          src=\"https://www.pngarts.com/files/1/Message-PNG-Image-with-Transparent-Background.png\"/>\n        Talkie\n      </div>\n      <NamePicker onSave={setName} />\n    </header>\n\n    <div className=\"messages\">\n      {messages.map((m,i)=>{\n        return <div key={i} className=\"message-wrap\"\n          from={m.name===name?'me':'you'}>\n          <div className=\"message\">\n            <div className=\"msg-name\">{m.name}</div>\n            <div className=\"msg-text\">{m.text}</div>\n          </div>\n        </div>\n      })}\n    </div>\n\n    <TextInput \n      showCamera={()=> setShowCamera(true)}\n      onSend={(text)=> {\n        db.send({\n          text, name, ts: new Date(), room\n        })\n      }} />\n    \n  </main>\n}\n\nfunction TextInput(props){\n  var [text, setText] = useState('') \n  // normal js comment\n  return <div className=\"text-input-wrap\">\n    {/* add button for camera here */}\n    <button onClick = {props.Camera}\n      style = {{position:'absolute', left:2, top: 10}}>\n      <FiCamera style = {{height:15, width: 15}} />\n    </button>\n\n    <input \n      value={text} \n      className=\"text-input\"\n      placeholder=\"write your message\"\n      onChange={e=> setText(e.target.value)}\n      onKeyPress={e=> {\n        if(e.key==='Enter') {\n          if(text) props.onSend(text)\n          setText('')\n        }\n      }}\n    />\n    <button onClick={()=> {\n      if(text) props.onSend(text)\n      setText('')\n    }} className=\"button\"\n      disabled={!text}>\n      SEND\n    </button>\n  </div>\n}\n\n\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}